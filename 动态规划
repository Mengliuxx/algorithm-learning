1、简介：
    动态规划用于解决一大类算法问题：一个阶段的最优解可以由之前某个（或某些）阶段的最优解得到。
    核心思想：归纳法  dp[n] = f(dp[n-i], dp[n-j],...)

2、解题步骤
    1. 确定需要保存在dp表中的状态（关键！）：例如数组，包括一维，二维，甚至三维。
    2. 确定当前状态和之前状态之间的递推关系（状态转移方程）： 例如整理f(n)和f(n-1)的关系
    3. 填充dp表
        a. 自顶向下：使用递归，大问题分解为小问题，dp表充当备忘录
        b. 自底向上：使用迭代，小问题合并为大问题，按依赖顺序进行填充
    4. 从dp表中读取最终状态，即结果。

3、动态规划类题目特征
    a. 能基于子问题最优解得到原问题最优解（最优子结构）
        反例：无法规划分子问题，或子问题和原问题在最优化过程中会互相制约
    b. 后续决策不受历史决策影响 （无后效性）
        反例：状态转移方程不仅依赖之前的状态，还依赖到达此状态的步骤。

4. dp表
    dp表通常使用一个一维或多维数组
        关键：确定影响状态的维度和每个元素代表的含义
        一维：dp[n] = f(dp[n-1])
        二维：dp[n][m] = f(dp[n][m-1], dp[n-1][m])
5、状态转移
    1. 枚举有几种状态可以通过转换得到最终的状态（以3个状态为例）
        stat1 --->transfer1---> final stat;
        stat2 --->transfer2---> final stat;
        stat3 --->transfer3---> final stat;
    其中stat表示状态，transfer表示转换方法

    2. 最终的状态：
        Optimal(final stat) = MAX(Optimal(stat1) + cost(transfer1), Optimal(stat2) + cost(transfer2), Optimal(stat3) + cost(transfer3))